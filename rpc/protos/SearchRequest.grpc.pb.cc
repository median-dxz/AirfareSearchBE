// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SearchRequest.proto

#include "SearchRequest.pb.h"
#include "SearchRequest.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace AirfareSearch {

static const char* FlightsSearchService_method_names[] = {
  "/AirfareSearch.FlightsSearchService/search",
};

std::unique_ptr< FlightsSearchService::Stub> FlightsSearchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FlightsSearchService::Stub> stub(new FlightsSearchService::Stub(channel, options));
  return stub;
}

FlightsSearchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_search_(FlightsSearchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FlightsSearchService::Stub::search(::grpc::ClientContext* context, const ::AirfareSearch::SearchRequest& request, ::AirfareSearch::SearchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AirfareSearch::SearchRequest, ::AirfareSearch::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_search_, context, request, response);
}

void FlightsSearchService::Stub::async::search(::grpc::ClientContext* context, const ::AirfareSearch::SearchRequest* request, ::AirfareSearch::SearchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AirfareSearch::SearchRequest, ::AirfareSearch::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void FlightsSearchService::Stub::async::search(::grpc::ClientContext* context, const ::AirfareSearch::SearchRequest* request, ::AirfareSearch::SearchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AirfareSearch::SearchResponse>* FlightsSearchService::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::AirfareSearch::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AirfareSearch::SearchResponse, ::AirfareSearch::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AirfareSearch::SearchResponse>* FlightsSearchService::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::AirfareSearch::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

FlightsSearchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FlightsSearchService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FlightsSearchService::Service, ::AirfareSearch::SearchRequest, ::AirfareSearch::SearchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FlightsSearchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AirfareSearch::SearchRequest* req,
             ::AirfareSearch::SearchResponse* resp) {
               return service->search(ctx, req, resp);
             }, this)));
}

FlightsSearchService::Service::~Service() {
}

::grpc::Status FlightsSearchService::Service::search(::grpc::ServerContext* context, const ::AirfareSearch::SearchRequest* request, ::AirfareSearch::SearchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AirfareSearch

