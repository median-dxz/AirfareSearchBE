// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchRequest.proto

#include "SearchRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AirfareSearch {
PROTOBUF_CONSTEXPR City::City(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CityDefaultTypeInternal() {}
  union {
    City _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CityDefaultTypeInternal _City_default_instance_;
PROTOBUF_CONSTEXPR Flight::Flight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cabins_)*/{}
  , /*decltype(_impl_._cabins_cached_byte_size_)*/{0}
  , /*decltype(_impl_.carrier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flightno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departuredatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arrivaldatetime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departure_)*/nullptr
  , /*decltype(_impl_.arrival_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightDefaultTypeInternal() {}
  union {
    Flight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightDefaultTypeInternal _Flight_default_instance_;
PROTOBUF_CONSTEXPR FlightResult::FlightResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flights_)*/{}
  , /*decltype(_impl_.agencies_)*/{}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlightResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlightResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlightResultDefaultTypeInternal() {}
  union {
    FlightResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlightResultDefaultTypeInternal _FlightResult_default_instance_;
PROTOBUF_CONSTEXPR SearchResponse::SearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agencies_)*/{}
  , /*decltype(_impl_.routes_)*/{}
  , /*decltype(_impl_.people_)*/0
  , /*decltype(_impl_.maxresults_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchRoute::SearchRoute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.departuredate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departure_)*/nullptr
  , /*decltype(_impl_.arrival_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRouteDefaultTypeInternal() {}
  union {
    SearchRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRouteDefaultTypeInternal _SearchRoute_default_instance_;
}  // namespace AirfareSearch
static ::_pb::Metadata file_level_metadata_SearchRequest_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SearchRequest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SearchRequest_2eproto = nullptr;

const uint32_t TableStruct_SearchRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::City, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::City, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::City, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.carrier_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.flightno_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.departure_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.arrival_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.departuredatetime_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.arrivaldatetime_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::Flight, _impl_.cabins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::FlightResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::FlightResult, _impl_.flights_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::FlightResult, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::FlightResult, _impl_.agencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRequest, _impl_.people_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRequest, _impl_.maxresults_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRequest, _impl_.agencies_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRequest, _impl_.routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRoute, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRoute, _impl_.departure_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRoute, _impl_.arrival_),
  PROTOBUF_FIELD_OFFSET(::AirfareSearch::SearchRoute, _impl_.departuredate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::AirfareSearch::City)},
  { 8, -1, -1, sizeof(::AirfareSearch::Flight)},
  { 21, -1, -1, sizeof(::AirfareSearch::FlightResult)},
  { 30, -1, -1, sizeof(::AirfareSearch::SearchResponse)},
  { 37, -1, -1, sizeof(::AirfareSearch::SearchRequest)},
  { 47, -1, -1, sizeof(::AirfareSearch::SearchRoute)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AirfareSearch::_City_default_instance_._instance,
  &::AirfareSearch::_Flight_default_instance_._instance,
  &::AirfareSearch::_FlightResult_default_instance_._instance,
  &::AirfareSearch::_SearchResponse_default_instance_._instance,
  &::AirfareSearch::_SearchRequest_default_instance_._instance,
  &::AirfareSearch::_SearchRoute_default_instance_._instance,
};

const char descriptor_table_protodef_SearchRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023SearchRequest.proto\022\rAirfareSearch\"\"\n\004"
  "City\022\014\n\004name\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"\323\001\n\006Fli"
  "ght\022\017\n\007carrier\030\001 \001(\t\022\020\n\010flightNo\030\002 \001(\t\022&"
  "\n\tdeparture\030\003 \001(\0132\023.AirfareSearch.City\022$"
  "\n\007arrival\030\004 \001(\0132\023.AirfareSearch.City\022\031\n\021"
  "departureDatetime\030\005 \001(\t\022\027\n\017arrivalDateti"
  "me\030\006 \001(\t\022$\n\006cabins\030\007 \003(\0162\024.AirfareSearch"
  ".Cabin\"W\n\014FlightResult\022&\n\007flights\030\001 \003(\0132"
  "\025.AirfareSearch.Flight\022\r\n\005price\030\002 \001(\005\022\020\n"
  "\010agencies\030\003 \003(\t\";\n\016SearchResponse\022)\n\004dat"
  "a\030\001 \003(\0132\033.AirfareSearch.FlightResult\"q\n\r"
  "SearchRequest\022\016\n\006people\030\001 \001(\005\022\022\n\nmaxResu"
  "lts\030\002 \001(\005\022\020\n\010agencies\030\003 \003(\t\022*\n\006routes\030\004 "
  "\003(\0132\032.AirfareSearch.SearchRoute\"~\n\013Searc"
  "hRoute\022\n\n\002id\030\001 \001(\005\022&\n\tdeparture\030\002 \001(\0132\023."
  "AirfareSearch.City\022$\n\007arrival\030\003 \001(\0132\023.Ai"
  "rfareSearch.City\022\025\n\rdepartureDate\030\004 \001(\t*"
  "\034\n\005Cabin\022\005\n\001F\020\000\022\005\n\001C\020\001\022\005\n\001Y\020\0022_\n\024Flights"
  "SearchService\022G\n\006search\022\034.AirfareSearch."
  "SearchRequest\032\035.AirfareSearch.SearchResp"
  "onse\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SearchRequest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SearchRequest_2eproto = {
    false, false, 814, descriptor_table_protodef_SearchRequest_2eproto,
    "SearchRequest.proto",
    &descriptor_table_SearchRequest_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_SearchRequest_2eproto::offsets,
    file_level_metadata_SearchRequest_2eproto, file_level_enum_descriptors_SearchRequest_2eproto,
    file_level_service_descriptors_SearchRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SearchRequest_2eproto_getter() {
  return &descriptor_table_SearchRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SearchRequest_2eproto(&descriptor_table_SearchRequest_2eproto);
namespace AirfareSearch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cabin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SearchRequest_2eproto);
  return file_level_enum_descriptors_SearchRequest_2eproto[0];
}
bool Cabin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class City::_Internal {
 public:
};

City::City(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.City)
}
City::City(const City& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  City* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.City)
}

inline void City::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

City::~City() {
  // @@protoc_insertion_point(destructor:AirfareSearch.City)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void City::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.code_.Destroy();
}

void City::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void City::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.City)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* City::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.City.name"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.City.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* City::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.City)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.City.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.City.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.City)
  return target;
}

size_t City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.City)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData City::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    City::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*City::GetClassData() const { return &_class_data_; }


void City::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<City*>(&to_msg);
  auto& from = static_cast<const City&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.City)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  return true;
}

void City::InternalSwap(City* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata City::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[0]);
}

// ===================================================================

class Flight::_Internal {
 public:
  static const ::AirfareSearch::City& departure(const Flight* msg);
  static const ::AirfareSearch::City& arrival(const Flight* msg);
};

const ::AirfareSearch::City&
Flight::_Internal::departure(const Flight* msg) {
  return *msg->_impl_.departure_;
}
const ::AirfareSearch::City&
Flight::_Internal::arrival(const Flight* msg) {
  return *msg->_impl_.arrival_;
}
Flight::Flight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.Flight)
}
Flight::Flight(const Flight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Flight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cabins_){from._impl_.cabins_}
    , /*decltype(_impl_._cabins_cached_byte_size_)*/{0}
    , decltype(_impl_.carrier_){}
    , decltype(_impl_.flightno_){}
    , decltype(_impl_.departuredatetime_){}
    , decltype(_impl_.arrivaldatetime_){}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.carrier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carrier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_carrier().empty()) {
    _this->_impl_.carrier_.Set(from._internal_carrier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flightno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flightno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flightno().empty()) {
    _this->_impl_.flightno_.Set(from._internal_flightno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.departuredatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departuredatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departuredatetime().empty()) {
    _this->_impl_.departuredatetime_.Set(from._internal_departuredatetime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arrivaldatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arrivaldatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arrivaldatetime().empty()) {
    _this->_impl_.arrivaldatetime_.Set(from._internal_arrivaldatetime(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_departure()) {
    _this->_impl_.departure_ = new ::AirfareSearch::City(*from._impl_.departure_);
  }
  if (from._internal_has_arrival()) {
    _this->_impl_.arrival_ = new ::AirfareSearch::City(*from._impl_.arrival_);
  }
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.Flight)
}

inline void Flight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cabins_){arena}
    , /*decltype(_impl_._cabins_cached_byte_size_)*/{0}
    , decltype(_impl_.carrier_){}
    , decltype(_impl_.flightno_){}
    , decltype(_impl_.departuredatetime_){}
    , decltype(_impl_.arrivaldatetime_){}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.carrier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carrier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flightno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flightno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.departuredatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departuredatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arrivaldatetime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arrivaldatetime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Flight::~Flight() {
  // @@protoc_insertion_point(destructor:AirfareSearch.Flight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Flight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cabins_.~RepeatedField();
  _impl_.carrier_.Destroy();
  _impl_.flightno_.Destroy();
  _impl_.departuredatetime_.Destroy();
  _impl_.arrivaldatetime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.departure_;
  if (this != internal_default_instance()) delete _impl_.arrival_;
}

void Flight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Flight::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.Flight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cabins_.Clear();
  _impl_.carrier_.ClearToEmpty();
  _impl_.flightno_.ClearToEmpty();
  _impl_.departuredatetime_.ClearToEmpty();
  _impl_.arrivaldatetime_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_ != nullptr) {
    delete _impl_.arrival_;
  }
  _impl_.arrival_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string carrier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_carrier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.Flight.carrier"));
        } else
          goto handle_unusual;
        continue;
      // string flightNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_flightno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.Flight.flightNo"));
        } else
          goto handle_unusual;
        continue;
      // .AirfareSearch.City departure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AirfareSearch.City arrival = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string departureDatetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_departuredatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.Flight.departureDatetime"));
        } else
          goto handle_unusual;
        continue;
      // string arrivalDatetime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_arrivaldatetime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.Flight.arrivalDatetime"));
        } else
          goto handle_unusual;
        continue;
      // repeated .AirfareSearch.Cabin cabins = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_cabins(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_cabins(static_cast<::AirfareSearch::Cabin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Flight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.Flight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string carrier = 1;
  if (!this->_internal_carrier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_carrier().data(), static_cast<int>(this->_internal_carrier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.Flight.carrier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_carrier(), target);
  }

  // string flightNo = 2;
  if (!this->_internal_flightno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flightno().data(), static_cast<int>(this->_internal_flightno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.Flight.flightNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flightno(), target);
  }

  // .AirfareSearch.City departure = 3;
  if (this->_internal_has_departure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::departure(this),
        _Internal::departure(this).GetCachedSize(), target, stream);
  }

  // .AirfareSearch.City arrival = 4;
  if (this->_internal_has_arrival()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::arrival(this),
        _Internal::arrival(this).GetCachedSize(), target, stream);
  }

  // string departureDatetime = 5;
  if (!this->_internal_departuredatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departuredatetime().data(), static_cast<int>(this->_internal_departuredatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.Flight.departureDatetime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_departuredatetime(), target);
  }

  // string arrivalDatetime = 6;
  if (!this->_internal_arrivaldatetime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arrivaldatetime().data(), static_cast<int>(this->_internal_arrivaldatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.Flight.arrivalDatetime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_arrivaldatetime(), target);
  }

  // repeated .AirfareSearch.Cabin cabins = 7;
  {
    int byte_size = _impl_._cabins_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.cabins_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.Flight)
  return target;
}

size_t Flight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.Flight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AirfareSearch.Cabin cabins = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_cabins_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_cabins(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cabins_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string carrier = 1;
  if (!this->_internal_carrier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_carrier());
  }

  // string flightNo = 2;
  if (!this->_internal_flightno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flightno());
  }

  // string departureDatetime = 5;
  if (!this->_internal_departuredatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_departuredatetime());
  }

  // string arrivalDatetime = 6;
  if (!this->_internal_arrivaldatetime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arrivaldatetime());
  }

  // .AirfareSearch.City departure = 3;
  if (this->_internal_has_departure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_);
  }

  // .AirfareSearch.City arrival = 4;
  if (this->_internal_has_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Flight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Flight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Flight::GetClassData() const { return &_class_data_; }


void Flight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Flight*>(&to_msg);
  auto& from = static_cast<const Flight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.Flight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cabins_.MergeFrom(from._impl_.cabins_);
  if (!from._internal_carrier().empty()) {
    _this->_internal_set_carrier(from._internal_carrier());
  }
  if (!from._internal_flightno().empty()) {
    _this->_internal_set_flightno(from._internal_flightno());
  }
  if (!from._internal_departuredatetime().empty()) {
    _this->_internal_set_departuredatetime(from._internal_departuredatetime());
  }
  if (!from._internal_arrivaldatetime().empty()) {
    _this->_internal_set_arrivaldatetime(from._internal_arrivaldatetime());
  }
  if (from._internal_has_departure()) {
    _this->_internal_mutable_departure()->::AirfareSearch::City::MergeFrom(
        from._internal_departure());
  }
  if (from._internal_has_arrival()) {
    _this->_internal_mutable_arrival()->::AirfareSearch::City::MergeFrom(
        from._internal_arrival());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Flight::CopyFrom(const Flight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.Flight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flight::IsInitialized() const {
  return true;
}

void Flight::InternalSwap(Flight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cabins_.InternalSwap(&other->_impl_.cabins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.carrier_, lhs_arena,
      &other->_impl_.carrier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flightno_, lhs_arena,
      &other->_impl_.flightno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.departuredatetime_, lhs_arena,
      &other->_impl_.departuredatetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arrivaldatetime_, lhs_arena,
      &other->_impl_.arrivaldatetime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Flight, _impl_.arrival_)
      + sizeof(Flight::_impl_.arrival_)
      - PROTOBUF_FIELD_OFFSET(Flight, _impl_.departure_)>(
          reinterpret_cast<char*>(&_impl_.departure_),
          reinterpret_cast<char*>(&other->_impl_.departure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Flight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[1]);
}

// ===================================================================

class FlightResult::_Internal {
 public:
};

FlightResult::FlightResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.FlightResult)
}
FlightResult::FlightResult(const FlightResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlightResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flights_){from._impl_.flights_}
    , decltype(_impl_.agencies_){from._impl_.agencies_}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.FlightResult)
}

inline void FlightResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flights_){arena}
    , decltype(_impl_.agencies_){arena}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlightResult::~FlightResult() {
  // @@protoc_insertion_point(destructor:AirfareSearch.FlightResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlightResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flights_.~RepeatedPtrField();
  _impl_.agencies_.~RepeatedPtrField();
}

void FlightResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlightResult::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.FlightResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flights_.Clear();
  _impl_.agencies_.Clear();
  _impl_.price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AirfareSearch.Flight flights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string agencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agencies();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.FlightResult.agencies"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlightResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.FlightResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AirfareSearch.Flight flights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flights_size()); i < n; i++) {
    const auto& repfield = this->_internal_flights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_price(), target);
  }

  // repeated string agencies = 3;
  for (int i = 0, n = this->_internal_agencies_size(); i < n; i++) {
    const auto& s = this->_internal_agencies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.FlightResult.agencies");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.FlightResult)
  return target;
}

size_t FlightResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.FlightResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AirfareSearch.Flight flights = 1;
  total_size += 1UL * this->_internal_flights_size();
  for (const auto& msg : this->_impl_.flights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string agencies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.agencies_.size());
  for (int i = 0, n = _impl_.agencies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.agencies_.Get(i));
  }

  // int32 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlightResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlightResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlightResult::GetClassData() const { return &_class_data_; }


void FlightResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlightResult*>(&to_msg);
  auto& from = static_cast<const FlightResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.FlightResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.flights_.MergeFrom(from._impl_.flights_);
  _this->_impl_.agencies_.MergeFrom(from._impl_.agencies_);
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlightResult::CopyFrom(const FlightResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.FlightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightResult::IsInitialized() const {
  return true;
}

void FlightResult::InternalSwap(FlightResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.flights_.InternalSwap(&other->_impl_.flights_);
  _impl_.agencies_.InternalSwap(&other->_impl_.agencies_);
  swap(_impl_.price_, other->_impl_.price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[2]);
}

// ===================================================================

class SearchResponse::_Internal {
 public:
};

SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.SearchResponse)
}

inline void SearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:AirfareSearch.SearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void SearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.SearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AirfareSearch.FlightResult data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.SearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AirfareSearch.FlightResult data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.SearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AirfareSearch.FlightResult data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }


void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResponse*>(&to_msg);
  auto& from = static_cast<const SearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.SearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[3]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
};

SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agencies_){from._impl_.agencies_}
    , decltype(_impl_.routes_){from._impl_.routes_}
    , decltype(_impl_.people_){}
    , decltype(_impl_.maxresults_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.people_, &from._impl_.people_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxresults_) -
    reinterpret_cast<char*>(&_impl_.people_)) + sizeof(_impl_.maxresults_));
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agencies_){arena}
    , decltype(_impl_.routes_){arena}
    , decltype(_impl_.people_){0}
    , decltype(_impl_.maxresults_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:AirfareSearch.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agencies_.~RepeatedPtrField();
  _impl_.routes_.~RepeatedPtrField();
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agencies_.Clear();
  _impl_.routes_.Clear();
  ::memset(&_impl_.people_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxresults_) -
      reinterpret_cast<char*>(&_impl_.people_)) + sizeof(_impl_.maxresults_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 people = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.people_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxResults = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxresults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string agencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agencies();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.SearchRequest.agencies"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .AirfareSearch.SearchRoute routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 people = 1;
  if (this->_internal_people() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_people(), target);
  }

  // int32 maxResults = 2;
  if (this->_internal_maxresults() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxresults(), target);
  }

  // repeated string agencies = 3;
  for (int i = 0, n = this->_internal_agencies_size(); i < n; i++) {
    const auto& s = this->_internal_agencies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.SearchRequest.agencies");
    target = stream->WriteString(3, s, target);
  }

  // repeated .AirfareSearch.SearchRoute routes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agencies = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.agencies_.size());
  for (int i = 0, n = _impl_.agencies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.agencies_.Get(i));
  }

  // repeated .AirfareSearch.SearchRoute routes = 4;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_impl_.routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 people = 1;
  if (this->_internal_people() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_people());
  }

  // int32 maxResults = 2;
  if (this->_internal_maxresults() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxresults());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.agencies_.MergeFrom(from._impl_.agencies_);
  _this->_impl_.routes_.MergeFrom(from._impl_.routes_);
  if (from._internal_people() != 0) {
    _this->_internal_set_people(from._internal_people());
  }
  if (from._internal_maxresults() != 0) {
    _this->_internal_set_maxresults(from._internal_maxresults());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agencies_.InternalSwap(&other->_impl_.agencies_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.maxresults_)
      + sizeof(SearchRequest::_impl_.maxresults_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.people_)>(
          reinterpret_cast<char*>(&_impl_.people_),
          reinterpret_cast<char*>(&other->_impl_.people_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[4]);
}

// ===================================================================

class SearchRoute::_Internal {
 public:
  static const ::AirfareSearch::City& departure(const SearchRoute* msg);
  static const ::AirfareSearch::City& arrival(const SearchRoute* msg);
};

const ::AirfareSearch::City&
SearchRoute::_Internal::departure(const SearchRoute* msg) {
  return *msg->_impl_.departure_;
}
const ::AirfareSearch::City&
SearchRoute::_Internal::arrival(const SearchRoute* msg) {
  return *msg->_impl_.arrival_;
}
SearchRoute::SearchRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AirfareSearch.SearchRoute)
}
SearchRoute::SearchRoute(const SearchRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRoute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.departuredate_){}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.departuredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departuredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departuredate().empty()) {
    _this->_impl_.departuredate_.Set(from._internal_departuredate(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_departure()) {
    _this->_impl_.departure_ = new ::AirfareSearch::City(*from._impl_.departure_);
  }
  if (from._internal_has_arrival()) {
    _this->_impl_.arrival_ = new ::AirfareSearch::City(*from._impl_.arrival_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:AirfareSearch.SearchRoute)
}

inline void SearchRoute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.departuredate_){}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.departuredate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departuredate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchRoute::~SearchRoute() {
  // @@protoc_insertion_point(destructor:AirfareSearch.SearchRoute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.departuredate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.departure_;
  if (this != internal_default_instance()) delete _impl_.arrival_;
}

void SearchRoute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:AirfareSearch.SearchRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.departuredate_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_ != nullptr) {
    delete _impl_.arrival_;
  }
  _impl_.arrival_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRoute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AirfareSearch.City departure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AirfareSearch.City arrival = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string departureDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_departuredate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AirfareSearch.SearchRoute.departureDate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirfareSearch.SearchRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .AirfareSearch.City departure = 2;
  if (this->_internal_has_departure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::departure(this),
        _Internal::departure(this).GetCachedSize(), target, stream);
  }

  // .AirfareSearch.City arrival = 3;
  if (this->_internal_has_arrival()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::arrival(this),
        _Internal::arrival(this).GetCachedSize(), target, stream);
  }

  // string departureDate = 4;
  if (!this->_internal_departuredate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departuredate().data(), static_cast<int>(this->_internal_departuredate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AirfareSearch.SearchRoute.departureDate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_departuredate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirfareSearch.SearchRoute)
  return target;
}

size_t SearchRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirfareSearch.SearchRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string departureDate = 4;
  if (!this->_internal_departuredate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_departuredate());
  }

  // .AirfareSearch.City departure = 2;
  if (this->_internal_has_departure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_);
  }

  // .AirfareSearch.City arrival = 3;
  if (this->_internal_has_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRoute::GetClassData() const { return &_class_data_; }


void SearchRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRoute*>(&to_msg);
  auto& from = static_cast<const SearchRoute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AirfareSearch.SearchRoute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_departuredate().empty()) {
    _this->_internal_set_departuredate(from._internal_departuredate());
  }
  if (from._internal_has_departure()) {
    _this->_internal_mutable_departure()->::AirfareSearch::City::MergeFrom(
        from._internal_departure());
  }
  if (from._internal_has_arrival()) {
    _this->_internal_mutable_arrival()->::AirfareSearch::City::MergeFrom(
        from._internal_arrival());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRoute::CopyFrom(const SearchRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirfareSearch.SearchRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRoute::IsInitialized() const {
  return true;
}

void SearchRoute::InternalSwap(SearchRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.departuredate_, lhs_arena,
      &other->_impl_.departuredate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRoute, _impl_.id_)
      + sizeof(SearchRoute::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SearchRoute, _impl_.departure_)>(
          reinterpret_cast<char*>(&_impl_.departure_),
          reinterpret_cast<char*>(&other->_impl_.departure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRoute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SearchRequest_2eproto_getter, &descriptor_table_SearchRequest_2eproto_once,
      file_level_metadata_SearchRequest_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AirfareSearch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AirfareSearch::City*
Arena::CreateMaybeMessage< ::AirfareSearch::City >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::City >(arena);
}
template<> PROTOBUF_NOINLINE ::AirfareSearch::Flight*
Arena::CreateMaybeMessage< ::AirfareSearch::Flight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::Flight >(arena);
}
template<> PROTOBUF_NOINLINE ::AirfareSearch::FlightResult*
Arena::CreateMaybeMessage< ::AirfareSearch::FlightResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::FlightResult >(arena);
}
template<> PROTOBUF_NOINLINE ::AirfareSearch::SearchResponse*
Arena::CreateMaybeMessage< ::AirfareSearch::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AirfareSearch::SearchRequest*
Arena::CreateMaybeMessage< ::AirfareSearch::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AirfareSearch::SearchRoute*
Arena::CreateMaybeMessage< ::AirfareSearch::SearchRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AirfareSearch::SearchRoute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
